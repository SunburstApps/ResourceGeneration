using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;

namespace Sunburst.ResourceGeneration
{
    public class GenerateRestextCodeBehindFile : TaskBase
    {
        [Required]
        public ITaskItem RestextFile { get; set; }

        [Required]
        public ITaskItem CodeBehindFile { get; set; }

        [Required]
        public string ManifestResourceName { get; set; }

        [Required]
        public string Language { get; set; }

        [Required]
        public string ClassName { get; set; }

        [Required]
        public string Namespace { get; set; }

        [Required]
        public string Visibility { get; set; }

        [Output]
        public ITaskItem Compile { get; set; }

        private static List<(string key, string comment)> ParseRestextFile(TextReader reader)
        {
            List<(string key, string comment)> entries = new List<(string key, string comment)>();

            StringBuilder name = new StringBuilder();
            StringBuilder comment = new StringBuilder();

            bool inComment = false;
            int ch = 0;
            while (ch != -1)
            {
                ch = reader.Read();
                if (ch == '\r' || ch == '\n')
                {
                    inComment = false;
                    continue;
                }

                if ((ch == '#' || ch == ';') && !inComment)
                {
                    inComment = true;
                    comment.Append(' ');
                    continue;
                }

                if (inComment)
                {
                    comment.Append((char)ch);
                }
                else
                {
                    if (ch == '=')
                    {
                        reader.ReadLine();

                        entries.Add((name.ToString().Trim(), comment.ToString().Trim()));
                        name = new StringBuilder();
                        comment = new StringBuilder();
                        continue;
                    }

                    name.Append((char)ch);
                }
            }

            return entries;
        }

        protected override void ExecuteCore()
        {
            bool internalMembers;
            if (Visibility.Equals("Public", StringComparison.OrdinalIgnoreCase))
            {
                internalMembers = false;
            }
            else if (Visibility.Equals("Internal", StringComparison.OrdinalIgnoreCase))
            {
                internalMembers = true;
            }
            else
            {
                throw new BuildErrorException("Visibility must be either Public or Internal");
            }

            try
            {
                if (Language.Equals("C#", StringComparison.OrdinalIgnoreCase))
                {
                    WriteCSharpCodeBehind(RestextFile, CodeBehindFile.GetMetadata("FullPath"), internalMembers);
                }
                else if (Language.Equals("VB", StringComparison.OrdinalIgnoreCase))
                {
                    WriteVisualBasicCodeBehind(RestextFile, CodeBehindFile.GetMetadata("FullPath"), internalMembers);
                }
                else
                {
                    throw new BuildErrorException($"Unrecognized language '{Language}'");
                }
            }
            catch (InvalidDataException e)
            {
                throw new BuildErrorException($"Error parsing file '{RestextFile.ItemSpec}': {e.Message}", e);
            }

            Compile = CodeBehindFile;
        }

        private void WriteCSharpCodeBehind(ITaskItem resxFile, string codeBehindFile, bool internalMembers)
        {
            string visibility = internalMembers ? "internal" : "public";
            StringBuilder builder = new StringBuilder();

            builder.AppendLine("// <auto-generated />");
            builder.AppendLine("using System.Reflection;");
            builder.AppendLine();

            const string classIndent = "    ";
            const string memberIndent = classIndent + "    ";

            builder.AppendLine($"namespace {Namespace}");
            builder.AppendLine("{");

            builder.AppendLine($"{classIndent}{visibility} static class {ClassName}");
            builder.AppendLine($"{classIndent}{{");

            builder.AppendLine($"{memberIndent}{visibility} static global::System.Resources.ResourceManager ResourceManager {{ get; }} = new global::System.Resources.ResourceManager(\"{ManifestResourceName}\", typeof({ClassName}).Assembly);");
            builder.AppendLine();

            List<(string key, string comment)> restextContent;
            using (var reader = new StreamReader(resxFile.ItemSpec))
                restextContent = ParseRestextFile(reader);

            foreach ((var name, var comment) in restextContent)
            {
                if (name == "") throw new BuildErrorException("Empty resource name");

                if (!string.IsNullOrWhiteSpace(comment))
                {
                    builder.AppendLine($"{memberIndent}/// <summary>");
                    builder.AppendLine($"{memberIndent}/// {comment}");
                    builder.AppendLine($"{memberIndent}/// </summary>");
                }

                string identifier = Utilities.CreateValidCSharpIdentifier(name);
                builder.AppendLine($"{memberIndent}{visibility} static string {identifier} => ResourceManager.GetString(\"{name}\", global::System.Globalization.CultureInfo.CurrentUICulture);");
            }

            builder.AppendLine($"{classIndent}}}");
            builder.AppendLine("}");

            File.WriteAllText(codeBehindFile, builder.ToString());
        }

        private void WriteVisualBasicCodeBehind(ITaskItem resxFile, string codeBehindFile, bool internalMembers)
        {
            string visibility = internalMembers ? "Friend" : "Public";
            StringBuilder builder = new StringBuilder();

            builder.AppendLine("' <auto-generated />");
            builder.AppendLine("Imports System.Reflection");
            builder.AppendLine();

            const string classIndent = "    ";
            const string memberIndent = classIndent + "    ";

            builder.AppendLine($"Namespace {Namespace}");
            builder.AppendLine($"{classIndent}{visibility} Class {ClassName}");
            builder.AppendLine($"{memberIndent}Private Sub New()");
            builder.AppendLine($"{memberIndent}End Sub");
            builder.AppendLine();

            builder.AppendLine($"{memberIndent}{visibility} Shared ReadOnly Property ResourceManager As New Global.System.Resources.ResourceManager ResourceManager(\"{ManifestResourceName}\", GetType({ClassName}).GetTypeInfo().Assembly);");
            builder.AppendLine();

            List<(string key, string comment)> restextContent;
            using (var reader = new StreamReader(resxFile.ItemSpec))
                restextContent = ParseRestextFile(reader);

            foreach ((var name, var comment) in restextContent)
            {
                if (name == "") throw new BuildErrorException("Empty resource name");

                if (!string.IsNullOrWhiteSpace(comment))
                {
                    builder.AppendLine($"{memberIndent}''' <summary>");
                    builder.AppendLine($"{memberIndent}''' {comment}");
                    builder.AppendLine($"{memberIndent}''' </summary>");
                }

                string identifier = Utilities.CreateValidVisualBasicIdentifier(name);
                builder.AppendLine($"{memberIndent}{visibility} Shared ReadOnly Property {identifier} As String");
                builder.AppendLine($"{memberIndent}    Get");
                builder.AppendLine($"{memberIndent}        Return ResourceManager.GetString(\"{name}\", Global.System.Globalization.CultureInfo.CurrentUICulture)");
                builder.AppendLine($"{memberIndent}    End Get");
                builder.AppendLine($"{memberIndent}End Property");
                builder.AppendLine();
            }

            builder.Append($"{classIndent}End Class");
            builder.AppendLine("End Namespace");

            File.WriteAllText(codeBehindFile, builder.ToString());
        }
    }
}
